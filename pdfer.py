import importlib
import os
import re
import shutil
import sys
import textwrap
from datetime import datetime
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    import inquirer
    import PyPDF2


def is_int(s: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ `s` —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º"""
    return bool(re.match(r'^-?\d+$', s))


def clear():
    """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Å–æ–ª—å"""
    os.system('cls' if os.name == 'nt' else 'clear')


def import_or_install_module(module_name: str):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –∏ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
    try:
        globals()[module_name.replace('-', '_')] = importlib.import_module(module_name.replace('-', '_'))
    except ModuleNotFoundError:
        print(f'{module_name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Python. –£—Å—Ç–∞–Ω–æ–≤–∫–∞...')
        if os.name == 'nt':
            os.system(f'py -m pip install {module_name} > {os.devnull} 2>&1')
        else:
            os.system(f'python3 -m pip install --break-system-packages {module_name} > {os.devnull} 2>&1')
        globals()[module_name.replace('-', '_')] = importlib.import_module(module_name.replace('-', '_'))


clear()
import_or_install_module('inquirer')
from inquirer.errors import ValidationError  # noqa: E402

import_or_install_module('prompt_toolkit')
from prompt_toolkit import PromptSession  # noqa: E402
from prompt_toolkit.completion import WordCompleter  # noqa: E402
from prompt_toolkit.validation import Validator  # noqa: E402

import_or_install_module('rich')
from rich.console import Console  # noqa: E402

import_or_install_module('PyPDF2')

console = Console()
session = PromptSession()


class PDFer:
    """–ö–ª–∞—Å—Å, —Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã"""

    @staticmethod
    def extract_page_range(input_pdf: str, start_page: int, end_page: int = -1, output_pdf: str = '') -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ PDF-—Ñ–∞–π–ª–∞ `input_pdf` –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç `start_page`
        –¥–æ `end_page` –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –Ω–æ–≤—ã–π PDF-—Ñ–∞–π–ª\n
        –ï—Å–ª–∏ `end_page` –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —Ç–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ `start_page`"""
        with open(input_pdf, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            writer = PyPDF2.PdfWriter()

            if end_page == -1:
                end_page = start_page

            order, shift = (1, 0) if start_page <= end_page else (-1, -2)
            start_page = max(0, start_page - 1)
            end_page = min(end_page, len(reader.pages)) + shift
            for page_num in range(start_page, end_page, order):
                writer.add_page(reader.pages[page_num])

        output_pdf = (output_pdf or input_pdf.removesuffix('.pdf')) + (
            (f'_{start_page + 1}' if start_page == end_page else f'_{start_page + 1}-{end_page}') + ' [PDFer].pdf'
        )
        with open(output_pdf, 'wb') as output_file:
            writer.write(output_file)
        return output_pdf

    @staticmethod
    def parse_page_ranges(page_ranges_str: str):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É `page_ranges_str` —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ '1-5, 8, 11-13'"""
        page_ranges = []
        for part in page_ranges_str.replace(' ', '').split(','):
            if '-' in part:
                start, end = map(int, part.split('-'))
                page_ranges.append([start, end])
            else:
                page_ranges.append([int(part)])
        return page_ranges

    @staticmethod
    def merge_pdfs(input_pdfs: list[str], output_pdf: str):
        """–°–∫–ª–µ–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª–æ–≤ `input_pdfs` –≤ –æ–¥–∏–Ω PDF-—Ñ–∞–π–ª `output_pdf`"""
        writer = PyPDF2.PdfWriter()

        for input_pdf in input_pdfs:
            with open(input_pdf, 'rb') as file:
                reader = PyPDF2.PdfReader(file)
                for page_num in range(len(reader.pages)):
                    writer.add_page(reader.pages[page_num])

        with open(output_pdf, 'wb') as output_file:
            writer.write(output_file)


class Validators:
    """–ö–ª–∞—Å—Å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞"""

    @staticmethod
    def is_to_exit(x: str) -> bool:
        return x in COMMANDS['exit']

    int_ = Validator.from_callable(lambda x: is_int(x) or Validators.is_to_exit(x), error_message='–í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!')
    pdf = lambda pass_enter: Validator.from_callable(
        lambda x: x.endswith('.pdf')
        or x.endswith('.pdf"')
        or Validators.is_to_exit(x)
        or (x == '' if pass_enter else False),
        error_message='–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å PDF-—Ñ–∞–π–ª–æ–º!',
    )
    range_ = Validator.from_callable(
        lambda x: all([re.match(r'^\s*\d+(\s*-\s*\d+)?\s*$', i) for i in x.replace(' ', '').split(',')])
        or Validators.is_to_exit(x),
        error_message='–í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Ç–æ–ª—å–∫–æ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å –∏ —á–∏—Å–ª–∞!',
    )

    @staticmethod
    def menu(_, current):
        if str(current) == ' ':
            raise ValidationError('', reason='–Ø –≤—Å–µ–≥–æ –ª–∏—à—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å... –ù–µ —Ç—Ä–æ–≥–∞–π –º–µ–Ω—è :)')
        return True


class Interface:
    """–ö–ª–∞—Å—Å, —Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã"""

    last_option = None

    @staticmethod
    def draw_header(full=False, compact=False):
        """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Å–æ–ª—å –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Ö–µ–¥–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –∫–æ–Ω—Å–æ–ª–∏"""
        columns = shutil.get_terminal_size().columns
        clear()
        console.print('[blue]‚îå' + '‚îÄ' * (columns - 2) + '‚îê')
        if not compact:
            console.print('[blue]‚îÇ' + ' ' * (columns - 2) + '‚îÇ')
        console.print('[blue]‚îÇ[/blue][red]' + 'PDFer'.center(columns - 2) + '[/red][blue]‚îÇ')
        if not compact:
            if full:
                console.print('[blue]‚îÇ[/blue]' + 'c –ª—é–±–æ–≤—å—é –æ—Ç snowlue üíô'.center(columns - 3) + '[blue]‚îÇ')
                console.print('[blue]‚îÇ' + ' ' * (columns - 2) + '‚îÇ')
                console.print(
                    '[blue]‚îÇ[/blue]'
                    + '–ù–∏–∫–æ–≥–¥–∞ –µ—â—ë —Ä–∞–±–æ—Ç–∞ —Å PDF –Ω–µ –±—ã–ª–∞ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–æ–π –∏ –±—ã—Å—Ç—Ä–æ–π!'.center(columns - 2)
                    + '[blue]‚îÇ'
                )
            console.print('[blue]‚îÇ' + ' ' * (columns - 2) + '‚îÇ')
        console.print('[blue]‚îî' + '‚îÄ' * (columns - 2) + '‚îò' + ('' if compact else '\n'))

    @staticmethod
    def override_keyboard_interrupt(func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ KeyboardInterrupt"""

        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except KeyboardInterrupt:
                return Interface.start()

        return wrapper

    @staticmethod
    def start():
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        Interface.draw_header(full=True)
        questions = [
            inquirer.List(
                'choice',
                message='–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ',
                choices=MENU,
                default=Interface.last_option,
                validate=Validators.menu,  # type: ignore
                carousel=True,
            )
        ]
        answers = inquirer.prompt(questions)
        try:
            Interface.last_option = answers['choice']
            ACTIONS_MATRIX[answers['choice']]['action']()
        except TypeError:
            return Interface.draw_exit()

    @staticmethod
    def get_pdf_file(pass_enter: bool = False, prompt_text: str = '', completer_list: set = set()) -> str | None:
        """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ PDF-—Ñ–∞–π–ª–∞\n
        –ü—Ä–∏ `pass_enter = True` –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É (–≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –±—ã–ª –Ω–∞–∂–∞—Ç Enter)"""
        files = (
            list(completer_list)
            or list(set(file for file in os.listdir() if os.path.isfile(file) and file.endswith('.pdf')))
            or [
                '–≤ –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç PDF-—Ñ–∞–π–ª–æ–≤',
                '—É–∫–∞–∑—ã–≤–∞–π –ø–æ–ª–Ω—ã–π –ø—É—Ç—å',
            ]
        )
        completer = WordCompleter(files)
        input_pdf = session.prompt(
            prompt_text or '–í–≤–µ–¥–∏ –∏–º—è –≤—Ö–æ–¥–Ω–æ–≥–æ PDF-—Ñ–∞–π–ª–∞: ',
            completer=completer,
            validator=Validators.pdf(pass_enter),
            mouse_support=True,
        )

        if input_pdf in COMMANDS['exit']:
            return 'exit' if pass_enter else None
        return input_pdf.removeprefix('"').removesuffix('"')

    @override_keyboard_interrupt
    @staticmethod
    def extract_many():
        """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ PDF-—Ñ–∞–π–ª–∞"""
        Interface.draw_header()
        input_pdf = Interface.get_pdf_file()
        if not input_pdf:
            return Interface.start()
        pages = session.prompt('–í–≤–µ–¥–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ', completer=WordCompleter([]), validator=Validators.range_)
        if pages in COMMANDS['exit']:
            return Interface.start()
        try:
            os.mkdir('temp')
        except FileExistsError:
            shutil.rmtree('temp')
            os.mkdir('temp')

        files: list[str] = []
        for page_range in PDFer.parse_page_ranges(pages):
            files.append(
                PDFer.extract_page_range(input_pdf, *page_range, output_pdf=f'temp/{os.path.basename(input_pdf)}')
            )
        pages = ','.join([file.rsplit('_')[1].split(' ')[0] for file in files])

        file_name = f'{input_pdf.removesuffix(".pdf")}_{pages} [PDFer].pdf'
        PDFer.merge_pdfs(files, file_name)
        shutil.rmtree('temp')
        file_name = basename if (basename := os.path.basename(file_name)) in os.listdir() else file_name
        console.print(f'[on dark_green]–î–∏–∞–ø–∞–∑–æ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã –≤ —Ñ–∞–π–ª {file_name}![/on dark_green]')
        input()
        Interface.start()

    @override_keyboard_interrupt
    @staticmethod
    def extract_range():
        """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ PDF-—Ñ–∞–π–ª–∞"""
        Interface.draw_header()
        input_pdf = Interface.get_pdf_file()
        if not input_pdf:
            return Interface.start()
        start_page = session.prompt(
            '–í–≤–µ–¥–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: ', completer=WordCompleter([]), validator=Validators.int_
        )
        if start_page in COMMANDS['exit']:
            return Interface.start()
        else:
            start_page = int(start_page)
        end_page = session.prompt('–í–≤–µ–¥–∏ –∫–æ–Ω–µ—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: ', completer=WordCompleter([]), validator=Validators.int_)
        if end_page in COMMANDS['exit']:
            return Interface.start()
        else:
            end_page = int(end_page)

        file_name = PDFer.extract_page_range(input_pdf, start_page, end_page)
        file_name = basename if (basename := os.path.basename(file_name)) in os.listdir() else file_name
        console.print(f'[on dark_green]–î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á—ë–Ω –≤ —Ñ–∞–π–ª {file_name}![/on dark_green]')
        input()
        Interface.start()

    @override_keyboard_interrupt
    @staticmethod
    def extract_single():
        """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ PDF-—Ñ–∞–π–ª–∞"""
        Interface.draw_header()
        input_pdf = Interface.get_pdf_file()
        if not input_pdf:
            return Interface.start()

        page_number = session.prompt('–í–≤–µ–¥–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ', completer=WordCompleter([]), validator=Validators.int_)
        if page_number in COMMANDS['exit']:
            return Interface.start()
        else:
            page_number = int(page_number)

        file_name = PDFer.extract_page_range(input_pdf, page_number)
        file_name = basename if (basename := os.path.basename(file_name)) in os.listdir() else file_name
        console.print(f'[on dark_green]–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∞ –≤ —Ñ–∞–π–ª {file_name}![/on dark_green]')
        input()
        Interface.start()

    @override_keyboard_interrupt
    @staticmethod
    def merge(not_enough: bool = False):
        """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∫–ª–µ–∏–≤–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö PDF-—Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω"""
        Interface.draw_header()
        input_pdfs = []
        if not_enough:
            console.print('[on dark_red]–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ PDF-—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–ª–µ–∏–≤–∞–Ω–∏—è![/on dark_red]', end='\n\n')
            not_enough = False
        while True:
            input_pdf = Interface.get_pdf_file(
                True, f'–í–≤–µ–¥–∏ –∏–º—è {len(input_pdfs) + 1}-–≥–æ PDF-—Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–ª–µ–∏–≤–∞–Ω–∏—è: ', set(input_pdfs)
            )
            if input_pdf == 'exit':
                return Interface.start()
            if input_pdf:
                input_pdfs.append(input_pdf)
                continue
            break

        if len(input_pdfs) < 2:
            return merge(True)

        file_name = Interface.get_pdf_file(
            prompt_text='–í–≤–µ–¥–∏ –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ PDF-—Ñ–∞–π–ª–∞: ', completer_list=set(input_pdfs)
        )
        if not file_name:
            return Interface.start()

        if file_name == os.path.basename(file_name):
            base_path = os.path.dirname(input_pdfs[0])
            if all(os.path.dirname(file) == base_path for file in input_pdfs[1:]):
                file_name = os.path.join(base_path, file_name)
        file_name = file_name.removesuffix('.pdf') + ' [PDFer].pdf'
        PDFer.merge_pdfs(input_pdfs, file_name)
        console.print(f'[on dark_green]PDF-—Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–∫–ª–µ–µ–Ω—ã –≤ —Ñ–∞–π–ª {file_name}![/on dark_green]')
        input()
        Interface.start()

    @override_keyboard_interrupt
    @staticmethod
    def draw_help():
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        columns = shutil.get_terminal_size().columns

        for action in ACTIONS_MATRIX.keys():
            help_info = ACTIONS_MATRIX[action]['help']
            Interface.draw_header(compact=True)
            console.print(f'[b]> {action}[/b]')
            for paragraph in help_info:
                print(
                    ''.join(
                        [
                            textwrap.indent(row.ljust(columns - 5), '  ‚îÇ  ')
                            for row in textwrap.wrap(paragraph, columns - 5)
                        ]
                    ),
                    end='\n\n' if paragraph.endswith('\n') else '\n',
                )
            print()
            if ACTIONS_MATRIX[action]['flags']['help_about_exit']:
                text = '–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ –Ω–∞–ø–∏—à–∏—Ç–µ ' + ', '.join(COMMANDS['exit'])
                print(
                    ''.join(
                        [textwrap.indent(row.ljust(columns - 5), '  ‚îÇ  ') for row in textwrap.wrap(text, columns - 5)]
                    )
                )
                print()
            console.print('–ù–∞–∂–º–∏ [i]Enter[/i] –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ [i]Ctrl-C[/i] –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–ø—Ä–∞–≤–∫–∏...', end='')
            input()
        Interface.start()

    @override_keyboard_interrupt
    @staticmethod
    def draw_about():
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ"""
        empty_line = lambda: console.print('[gold1]‚ïë' + ' ' * (columns - 2) + '‚ïë')

        columns = shutil.get_terminal_size().columns
        clear()

        console.print('[gold1]‚ïî' + '‚ïê' * (columns - 2) + '‚ïó')
        empty_line()
        console.print('[gold1]‚ïë[/gold1][red3]' + 'PDFer'.center(columns - 2) + '[/red3][gold1]‚ïë')
        console.print('[gold1]‚ïë[/gold1]' + 'c –ª—é–±–æ–≤—å—é –æ—Ç snowlue üíô'.center(columns - 3) + '[gold1]‚ïë')
        empty_line()
        raw, styled = (
            '–ù–∏–∫–æ–≥–¥–∞ –µ—â—ë —Ä–∞–±–æ—Ç–∞ —Å PDF –Ω–µ –±—ã–ª–∞ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–æ–π –∏ –±—ã—Å—Ç—Ä–æ–π!',
            '–ù–∏–∫–æ–≥–¥–∞ –µ—â—ë —Ä–∞–±–æ—Ç–∞ —Å PDF –Ω–µ –±—ã–ª–∞ –Ω–∞—Å—Ç–æ–ª—å–∫–æ [u]–ø—Ä–æ—Å—Ç–æ–π[/u] –∏ [u]–±—ã—Å—Ç—Ä–æ–π[/u]!',
        )
        console.print('[gold1]‚ïë[/gold1]' + raw.center(columns - 2).replace(raw, styled) + '[gold1]‚ïë')
        empty_line()
        console.print('[gold1]‚ï†' + '‚ïê' * (columns - 2) + '‚ï£')
        empty_line()
        empty_line()
        raw, styled = '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:  –ü–∞–≤–µ–ª –û–≤—á–∏–Ω–Ω–∏–∫–æ–≤', '[blink]–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:  –ü–∞–≤–µ–ª –û–≤—á–∏–Ω–Ω–∏–∫–æ–≤[/blink]'
        console.print('[gold1]‚ïë[/gold1]' + raw.center(columns - 2).replace(raw, styled) + '[gold1]‚ïë')
        empty_line()

        if os.name == 'nt':
            raw, styled = (
                'VK   |   Telegram   |   GitHub',
                '[dodger_blue2][link=https://vk.com/snowlue]VK[/link][/dodger_blue2]   |   [deep_sky_blue1][link=https://t.me/snowlue]Telegram[/link][/deep_sky_blue1]   |   [link=https://github.com/snowlue][bright_white]GitHub[/bright_white][/link]',
            )
            console.print('[gold1]‚ïë[/gold1]' + raw.center(columns - 2).replace(raw, styled) + '[gold1]‚ïë')
        else:
            raw, styled = (
                ' VK' + ' ' * 12 + '‚îÇ' + ' ' * 8 + 'Telegram' + ' ' * 8 + '‚îÇ' + ' ' * 12 + 'GitHub',
                ' [dodger_blue2]VK[/dodger_blue2]'
                + ' ' * 12 + '‚îÇ' + ' ' * 8
                + '[deep_sky_blue1]Telegram[/deep_sky_blue1]'
                + ' ' * 8 + '‚îÇ' + ' ' * 12
                + '[bright_white]GitHub[/bright_white]',
            )
            console.print('[gold1]‚ïë[/gold1]' + raw.center(columns - 2).replace(raw, styled) + '[gold1]‚ïë')
            links = 'https://vk.com/snowlue  ‚îÇ  https://t.me/snowlue  ‚îÇ  https://github.com/snowlue'
            console.print('[gold1]‚ïë[/gold1]' + links.center(columns - 2) + '[gold1]‚ïë')

        empty_line()
        empty_line()
        console.print('[gold1]‚ïö' + '‚ïê' * (columns - 2) + '‚ïù', end='\n\n')
        raw, styled = (
            f'¬© {datetime.now().year}, Pavel Ovchinnikov',
            f'[grey66]¬© {datetime.now().year}, Pavel Ovchinnikov[/grey66]',
        )
        console.print(raw.center(columns).replace(raw, styled), end='')
        input()
        Interface.start()

    @staticmethod
    def draw_exit():
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        Interface.draw_header()
        console.print('    [u]–ñ–¥—É —Ç–≤–æ–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è![/u] üëãüèº', justify='center')
        sys.exit(0)


class Separator:
    """–ö–ª–∞—Å—Å-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –º–µ–Ω—é"""

    def __repr__(self):
        return 'Separator'

    def __str__(self):
        return ' '


COMMANDS = {'exit': ['exit', '–≤—ã—Ö–æ–¥', '–≤—ã–π—Ç–∏', 'quit', 'q']}

ACTIONS_MATRIX = {
    ' –ò–∑–≤–ª–µ—á—å –Ω–∞–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ PDF-—Ñ–∞–π–ª–∞': {
        'action': Interface.extract_many,
        'flags': {'help_about_exit': True},
        'help': [
            '–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ PDF-—Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –Ω–æ–≤—ã–π.\n',
            '–ü–æ–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, —Ç.–∫. –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1-5, 8, 11-13. –ë–æ–ª–µ–µ —Ç–æ–≥–æ, –∏–º–µ–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ–∫–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5-1. –ò –≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–æ–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å: 1, 1, 3-5, 4, 1. –í—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –¥–æ –∫–æ–Ω–µ—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.\n',
            '‚Äì –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ PDF-—Ñ–∞–π–ª–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
            '‚Äì –ó–∞—Ç–µ–º –≤–≤–µ–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.',
        ],
    },
    ' –ò–∑–≤–ª–µ—á—å –æ–¥–∏–Ω –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ PDF-—Ñ–∞–π–ª–∞': {
        'action': Interface.extract_range,
        'flags': {'help_about_exit': True},
        'help': [
            '–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–¥–∏–Ω –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ PDF-—Ñ–∞–π–ª–∞ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –¥–æ –∫–æ–Ω–µ—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ. –ï—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —Ç–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.\n',
            '‚Äì –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ PDF-—Ñ–∞–π–ª–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
            '‚Äì –ó–∞—Ç–µ–º –≤–≤–µ–¥–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.',
            '‚Äì –ò –≤ –∫–æ–Ω—Ü–µ –≤–≤–µ–¥–∏ –∫–æ–Ω–µ—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.',
        ],
    },
    ' –ò–∑–≤–ª–µ—á—å –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ PDF-—Ñ–∞–π–ª–∞': {
        'action': Interface.extract_single,
        'flags': {'help_about_exit': True},
        'help': [
            '–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ PDF-—Ñ–∞–π–ª–∞.\n',
            '‚Äì –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ PDF-—Ñ–∞–π–ª–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.',
            '‚Äì –ó–∞—Ç–µ–º –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∏–∑–≤–ª–µ—á—å.',
        ],
    },
    ' –°–∫–ª–µ–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω': {
        'action': Interface.merge,
        'flags': {'help_about_exit': True},
        'help': [
            '–°–∫–ª–µ–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω –æ–±—â–∏–π. –ü–æ—Ä—è–¥–æ–∫ —Å–∫–ª–µ–∏–≤–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤–≤–µ–¥—ë–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º PDF-—Ñ–∞–π–ª–æ–≤. –ï—Å–ª–∏ –≤–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–º –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å, —Ç–æ –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ —Å–∫–ª–µ–µ–Ω–Ω—ã–º–∏ PDF —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ –≤—Å–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ ‚Äî –∏–Ω–∞—á–µ –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å.\n',
            '‚Äì –í–≤–æ–¥–∏ –∏–º–µ–Ω–∞ PDF-—Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å —Å–∫–ª–µ–∏—Ç—å, –ø–æ –æ–¥–Ω–æ–º—É, –Ω–∞–∂–∏–º–∞—è Enter –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ.',
            '‚Äì –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–∂–º–∏—Ç–µ Enter —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π, –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–æ–¥—è.',
            '‚Äì –í –∫–æ–Ω—Ü–µ –≤–≤–µ–¥–∏ –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ PDF-—Ñ–∞–π–ª–∞.',
        ],
    },
    ' –ü–æ–º–æ—â—å': {
        'action': Interface.draw_help,
        'flags': {'help_about_exit': False},
        'help': ['–í—ã–≤–æ–¥–∏—Ç —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.'],
    },
    ' –û –ø—Ä–æ–≥—Ä–∞–º–º–µ': {
        'action': Interface.draw_about,
        'flags': {'help_about_exit': False},
        'help': ['–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ.'],
    },
    ' –í—ã—Ö–æ–¥': {'action': Interface.draw_exit, 'flags': {'help_about_exit': False}, 'help': ['–ó–∞–≤–µ—Ä—à–∞–µ—Ç PDFer.']},
}

MENU = list(ACTIONS_MATRIX.keys())[:-3] + [Separator()] + list(ACTIONS_MATRIX.keys())[-3:]


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    if not __loader__:
        Interface.start()
    elif __loader__.name != os.path.basename(__file__).removesuffix('.py'):  # –Ω–µ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ –º–æ–¥—É–ª—å —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥ -m
        if len(sys.argv) == 1:  # –Ω–µ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ python
            return Interface.start()

    # TODO: –∑–¥–µ—Å—å —á–µ—Ä–µ–∑ argparse –æ–ø–∏—à—É –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    # TODO: --extract file.pdf a-b,c,d-f
    # TODO: --merge file1.pdf file2.pdf file3.pdf new_file.pdf
    # TODO: --help, --about


if __name__ == '__main__':
    main()
